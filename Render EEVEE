import bpy
# Configurar o motor de render para Eevee
bpy.context.scene.render.engine = 'BLENDER_EEVEE_NEXT'
# Ajustar cinfiguraçoes de render
eevee = bpy.context.scene.eevee
eevee.taa_render_samples = 64
#eevee.use_bloom = False
#eevee.use_ssr = False
#eevee.use_volumetric_lights = False
eevee.use_gtao = True
# Configuração de sombra
#eevee.shadow_cube_size = '1024'
#eevee.shadow_cascade_size = '1024'
#eevee.use_shadow.high_bitdepth = True
#eevee.use_shadow_soft = True
# Definir resolução e formato de saída
bpy.context.scene.render.resolution_x = 1920
bpy.context.scene.render.resolution_y = 1080
bpy.context.scene.render.image_settings.file_format = 'PNG'
# Adicionar iluminaçao básica
light_data = bpy.data.lights.new(name="Sun", type='SUN')
light = bpy.data.objects.new(name="Sun", object_data=light_data)
bpy.context.collection.objects.link(light)
light.location = (4, -4, 10)
light.data.energy = 2.0
light.data.angle = 0.5
# Configurar um fundo de cor sólida para visual estilizado
bpy.context.scene.world.use_nodes = True
bg_node = bpy.context.scene.world.node_tree.nodes.new(type="ShaderNodeBackground")
bg_node.inputs[0].default_value = (0.8, 0.9, 1.0, 1)
bpy.context.scene.world.node_tree.links.new(
    bg_node.outputs[0], bpy.context.scene.world.node_tree.nodes["World Output"].inputs[0]
)
# Posicionar a câmera 
cam = bpy.data.objects.get("Camera")
if cam:
    cam.location = (5, -5, 3)
    cam.rotation_euler = (1.2, 0, 0.8)
# Renderizar a imagem
bpy.ops.render.render(write_still=True)    